AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: ECS Base Template
Parameters:
  ApplicationEnvironment:
    Type: String
    Default: dev
  ApplicationName:
    Type: String
    Default: booking-service
  EcrImageUri:
    Type: String
    Description: Full Uri for consumer docker image to run in container
Resources:
  # Role for ECS container
  ContainerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ApplicationName}-${ApplicationEnvironment}-ContainerExecutionRole'
      Description: IAM Role for ECS container
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ecs-tasks.amazonaws.com
          Action:
          - sts:AssumeRole
      Tags:
          - Key: ApplicationName
            Value: !Ref ApplicationName
          - Key: ApplicationEnvironment
            Value: !Ref ApplicationEnvironment
  # Fargate ECS Service
  MicroService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Join ['-', [!Ref ApplicationName, !Ref ApplicationEnvironment]]
      Cluster: '{{resolve:secretsmanager:ecs-cluster-name:SecretString:ecs-cluster-name}}'
      TaskDefinition: !Ref TaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - '{{resolve:secretsmanager:private-subnet:SecretString:private-subnet}}'
          SecurityGroups:
            - '{{resolve:secretsmanager:vpc-security-group:SecretString:vpc-security-group}}'
      LoadBalancers:
        - ContainerName: !Ref ApplicationName
          ContainerPort: 8091
          TargetGroupArn: arn:aws:elasticloadbalancing:us-east-2:135316859264:targetgroup/booking-service-target-group/d1b6da1b8c5bb745
  # Fargate Task Definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${ApplicationName}-${ApplicationEnvironment}
      RequiresCompatibilities:
        - FARGATE
      Memory: '2048'
      Cpu: '256'
      NetworkMode: awsvpc
      ExecutionRoleArn: '{{resolve:secretsmanager:ecs-task-execution-role:SecretString:ecs-task-execution-role}}'
      TaskRoleArn: !Ref ContainerExecutionRole
      ContainerDefinitions:
        - Name: !Ref ApplicationName
          Image: !Ref EcrImageUri
          PortMappings:
            - ContainerPort: 8091
          Environment:
            - Name: APPLICATION_NAME
              Value: !Sub ${ApplicationName}
            - Name: APPLICATION_ENVIRONMENT
              Value: !Ref ApplicationEnvironment
            - Name: DB_USERNAME
              Value: '{{resolve:secretsmanager:mysql-username:SecretString:username}}'
            - Name: DB_PASSWORD
              Value: '{{resolve:secretsmanager:mysql-password:SecretString:password}}'
            - Name: JWT_KEY
              Value: '{{resolve:secretsmanager:jwt-secret-key:SecretString:jwt-secret-key}}'
            - Name: AWS_EMAIL_SENDER
              Value: '{{resolve:secretsmanager:aws-email-sender:SecretString:aws-email-sender}}'
            - Name: PORT
              Value: '8091'
            - Name: DB_HOST_URL
              Value: !Join
                - ''
                - - 'jdbc:mysql://{{resolve:secretsmanager:mysql:SecretString:host}}'
                  - ':{{resolve:secretsmanager:mysql:SecretString:port}}'
                  - '/{{resolve:secretsmanager:mysql:SecretString:dbname}}'
          Essential: true
          Memory: 1024
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub /ecs/Baristas/${ApplicationName}/${ApplicationEnvironment}
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
              awslogs-create-group: 'true'
